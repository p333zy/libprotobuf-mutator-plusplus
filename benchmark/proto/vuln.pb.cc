// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vuln.proto

#include "vuln.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vuln {
namespace fuzz {
constexpr RPCArgument::RPCArgument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct RPCArgumentDefaultTypeInternal {
  constexpr RPCArgumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCArgumentDefaultTypeInternal() {}
  union {
    RPCArgument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCArgumentDefaultTypeInternal _RPCArgument_default_instance_;
constexpr RPCCall::RPCCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , op_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RPCCallDefaultTypeInternal {
  constexpr RPCCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCCallDefaultTypeInternal() {}
  union {
    RPCCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCCallDefaultTypeInternal _RPCCall_default_instance_;
}  // namespace fuzz
}  // namespace vuln
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vuln_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vuln_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vuln_2eproto = nullptr;

const uint32_t TableStruct_vuln_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCArgument, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCArgument, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCArgument, key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCArgument, value_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCCall, op_),
  PROTOBUF_FIELD_OFFSET(::vuln::fuzz::RPCCall, args_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::vuln::fuzz::RPCArgument)},
  { 17, 25, -1, sizeof(::vuln::fuzz::RPCCall)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vuln::fuzz::_RPCArgument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vuln::fuzz::_RPCCall_default_instance_),
};

const char descriptor_table_protodef_vuln_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nvuln.proto\022\tvuln.fuzz\"f\n\013RPCArgument\022\013"
  "\n\003key\030\001 \002(\014\022\016\n\004vstr\030\002 \001(\014H\000\022\016\n\004vint\030\003 \001("
  "\004H\000\022\017\n\005vbool\030\004 \001(\010H\000\022\020\n\006vfloat\030\005 \001(\001H\000B\007"
  "\n\005value\";\n\007RPCCall\022\n\n\002op\030\001 \002(\014\022$\n\004args\030\002"
  " \003(\0132\026.vuln.fuzz.RPCArgument"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vuln_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vuln_2eproto = {
  false, false, 188, descriptor_table_protodef_vuln_2eproto, "vuln.proto", 
  &descriptor_table_vuln_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_vuln_2eproto::offsets,
  file_level_metadata_vuln_2eproto, file_level_enum_descriptors_vuln_2eproto, file_level_service_descriptors_vuln_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vuln_2eproto_getter() {
  return &descriptor_table_vuln_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vuln_2eproto(&descriptor_table_vuln_2eproto);
namespace vuln {
namespace fuzz {

// ===================================================================

class RPCArgument::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCArgument>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RPCArgument::RPCArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vuln.fuzz.RPCArgument)
}
RPCArgument::RPCArgument(const RPCArgument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kVstr: {
      _internal_set_vstr(from._internal_vstr());
      break;
    }
    case kVint: {
      _internal_set_vint(from._internal_vint());
      break;
    }
    case kVbool: {
      _internal_set_vbool(from._internal_vbool());
      break;
    }
    case kVfloat: {
      _internal_set_vfloat(from._internal_vfloat());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vuln.fuzz.RPCArgument)
}

inline void RPCArgument::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_value();
}

RPCArgument::~RPCArgument() {
  // @@protoc_insertion_point(destructor:vuln.fuzz.RPCArgument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCArgument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void RPCArgument::ArenaDtor(void* object) {
  RPCArgument* _this = reinterpret_cast< RPCArgument* >(object);
  (void)_this;
}
void RPCArgument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCArgument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCArgument::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:vuln.fuzz.RPCArgument)
  switch (value_case()) {
    case kVstr: {
      value_.vstr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVint: {
      // No need to clear
      break;
    }
    case kVbool: {
      // No need to clear
      break;
    }
    case kVfloat: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void RPCArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:vuln.fuzz.RPCArgument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCArgument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes vstr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_vint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool vbool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_vbool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double vfloat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _internal_set_vfloat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCArgument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vuln.fuzz.RPCArgument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  switch (value_case()) {
    case kVstr: {
      target = stream->WriteBytesMaybeAliased(
          2, this->_internal_vstr(), target);
      break;
    }
    case kVint: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_vint(), target);
      break;
    }
    case kVbool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_vbool(), target);
      break;
    }
    case kVfloat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_vfloat(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vuln.fuzz.RPCArgument)
  return target;
}

size_t RPCArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vuln.fuzz.RPCArgument)
  size_t total_size = 0;

  // required bytes key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // bytes vstr = 2;
    case kVstr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vstr());
      break;
    }
    // uint64 vint = 3;
    case kVint: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_vint());
      break;
    }
    // bool vbool = 4;
    case kVbool: {
      total_size += 1 + 1;
      break;
    }
    // double vfloat = 5;
    case kVfloat: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCArgument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCArgument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCArgument::GetClassData() const { return &_class_data_; }

void RPCArgument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCArgument *>(to)->MergeFrom(
      static_cast<const RPCArgument &>(from));
}


void RPCArgument::MergeFrom(const RPCArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vuln.fuzz.RPCArgument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
  switch (from.value_case()) {
    case kVstr: {
      _internal_set_vstr(from._internal_vstr());
      break;
    }
    case kVint: {
      _internal_set_vint(from._internal_vint());
      break;
    }
    case kVbool: {
      _internal_set_vbool(from._internal_vbool());
      break;
    }
    case kVfloat: {
      _internal_set_vfloat(from._internal_vfloat());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCArgument::CopyFrom(const RPCArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vuln.fuzz.RPCArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCArgument::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RPCArgument::InternalSwap(RPCArgument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCArgument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vuln_2eproto_getter, &descriptor_table_vuln_2eproto_once,
      file_level_metadata_vuln_2eproto[0]);
}

// ===================================================================

class RPCCall::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCCall>()._has_bits_);
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RPCCall::RPCCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:vuln.fuzz.RPCCall)
}
RPCCall::RPCCall(const RPCCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_op()) {
    op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_op(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vuln.fuzz.RPCCall)
}

inline void RPCCall::SharedCtor() {
op_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPCCall::~RPCCall() {
  // @@protoc_insertion_point(destructor:vuln.fuzz.RPCCall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  op_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCCall::ArenaDtor(void* object) {
  RPCCall* _this = reinterpret_cast< RPCCall* >(object);
  (void)_this;
}
void RPCCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCCall::Clear() {
// @@protoc_insertion_point(message_clear_start:vuln.fuzz.RPCCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    op_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vuln.fuzz.RPCArgument args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vuln.fuzz.RPCCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes op = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_op(), target);
  }

  // repeated .vuln.fuzz.RPCArgument args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vuln.fuzz.RPCCall)
  return target;
}

size_t RPCCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vuln.fuzz.RPCCall)
  size_t total_size = 0;

  // required bytes op = 1;
  if (_internal_has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_op());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vuln.fuzz.RPCArgument args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCCall::GetClassData() const { return &_class_data_; }

void RPCCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCCall *>(to)->MergeFrom(
      static_cast<const RPCCall &>(from));
}


void RPCCall::MergeFrom(const RPCCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vuln.fuzz.RPCCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from._internal_has_op()) {
    _internal_set_op(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCCall::CopyFrom(const RPCCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vuln.fuzz.RPCCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCCall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_))
    return false;
  return true;
}

void RPCCall::InternalSwap(RPCCall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &op_, lhs_arena,
      &other->op_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCCall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vuln_2eproto_getter, &descriptor_table_vuln_2eproto_once,
      file_level_metadata_vuln_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fuzz
}  // namespace vuln
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vuln::fuzz::RPCArgument* Arena::CreateMaybeMessage< ::vuln::fuzz::RPCArgument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vuln::fuzz::RPCArgument >(arena);
}
template<> PROTOBUF_NOINLINE ::vuln::fuzz::RPCCall* Arena::CreateMaybeMessage< ::vuln::fuzz::RPCCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vuln::fuzz::RPCCall >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
