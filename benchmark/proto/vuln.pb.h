// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vuln.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vuln_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vuln_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vuln_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vuln_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vuln_2eproto;
namespace vuln {
namespace fuzz {
class RPCArgument;
struct RPCArgumentDefaultTypeInternal;
extern RPCArgumentDefaultTypeInternal _RPCArgument_default_instance_;
class RPCCall;
struct RPCCallDefaultTypeInternal;
extern RPCCallDefaultTypeInternal _RPCCall_default_instance_;
}  // namespace fuzz
}  // namespace vuln
PROTOBUF_NAMESPACE_OPEN
template<> ::vuln::fuzz::RPCArgument* Arena::CreateMaybeMessage<::vuln::fuzz::RPCArgument>(Arena*);
template<> ::vuln::fuzz::RPCCall* Arena::CreateMaybeMessage<::vuln::fuzz::RPCCall>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vuln {
namespace fuzz {

// ===================================================================

class RPCArgument final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vuln.fuzz.RPCArgument) */ {
 public:
  inline RPCArgument() : RPCArgument(nullptr) {}
  ~RPCArgument() override;
  explicit constexpr RPCArgument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCArgument(const RPCArgument& from);
  RPCArgument(RPCArgument&& from) noexcept
    : RPCArgument() {
    *this = ::std::move(from);
  }

  inline RPCArgument& operator=(const RPCArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCArgument& operator=(RPCArgument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCArgument& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kVstr = 2,
    kVint = 3,
    kVbool = 4,
    kVfloat = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const RPCArgument* internal_default_instance() {
    return reinterpret_cast<const RPCArgument*>(
               &_RPCArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPCArgument& a, RPCArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCArgument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCArgument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCArgument>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCArgument& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCArgument& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCArgument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vuln.fuzz.RPCArgument";
  }
  protected:
  explicit RPCArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kVstrFieldNumber = 2,
    kVintFieldNumber = 3,
    kVboolFieldNumber = 4,
    kVfloatFieldNumber = 5,
  };
  // required bytes key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes vstr = 2;
  bool has_vstr() const;
  private:
  bool _internal_has_vstr() const;
  public:
  void clear_vstr();
  const std::string& vstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vstr();
  PROTOBUF_NODISCARD std::string* release_vstr();
  void set_allocated_vstr(std::string* vstr);
  private:
  const std::string& _internal_vstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vstr(const std::string& value);
  std::string* _internal_mutable_vstr();
  public:

  // uint64 vint = 3;
  bool has_vint() const;
  private:
  bool _internal_has_vint() const;
  public:
  void clear_vint();
  uint64_t vint() const;
  void set_vint(uint64_t value);
  private:
  uint64_t _internal_vint() const;
  void _internal_set_vint(uint64_t value);
  public:

  // bool vbool = 4;
  bool has_vbool() const;
  private:
  bool _internal_has_vbool() const;
  public:
  void clear_vbool();
  bool vbool() const;
  void set_vbool(bool value);
  private:
  bool _internal_vbool() const;
  void _internal_set_vbool(bool value);
  public:

  // double vfloat = 5;
  bool has_vfloat() const;
  private:
  bool _internal_has_vfloat() const;
  public:
  void clear_vfloat();
  double vfloat() const;
  void set_vfloat(double value);
  private:
  double _internal_vfloat() const;
  void _internal_set_vfloat(double value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:vuln.fuzz.RPCArgument)
 private:
  class _Internal;
  void set_has_vstr();
  void set_has_vint();
  void set_has_vbool();
  void set_has_vfloat();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vstr_;
    uint64_t vint_;
    bool vbool_;
    double vfloat_;
  } value_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_vuln_2eproto;
};
// -------------------------------------------------------------------

class RPCCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vuln.fuzz.RPCCall) */ {
 public:
  inline RPCCall() : RPCCall(nullptr) {}
  ~RPCCall() override;
  explicit constexpr RPCCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCCall(const RPCCall& from);
  RPCCall(RPCCall&& from) noexcept
    : RPCCall() {
    *this = ::std::move(from);
  }

  inline RPCCall& operator=(const RPCCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCCall& operator=(RPCCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCCall* internal_default_instance() {
    return reinterpret_cast<const RPCCall*>(
               &_RPCCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RPCCall& a, RPCCall& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCCall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vuln.fuzz.RPCCall";
  }
  protected:
  explicit RPCCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // repeated .vuln.fuzz.RPCArgument args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::vuln::fuzz::RPCArgument* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vuln::fuzz::RPCArgument >*
      mutable_args();
  private:
  const ::vuln::fuzz::RPCArgument& _internal_args(int index) const;
  ::vuln::fuzz::RPCArgument* _internal_add_args();
  public:
  const ::vuln::fuzz::RPCArgument& args(int index) const;
  ::vuln::fuzz::RPCArgument* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vuln::fuzz::RPCArgument >&
      args() const;

  // required bytes op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const std::string& op() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_op(ArgT0&& arg0, ArgT... args);
  std::string* mutable_op();
  PROTOBUF_NODISCARD std::string* release_op();
  void set_allocated_op(std::string* op);
  private:
  const std::string& _internal_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // @@protoc_insertion_point(class_scope:vuln.fuzz.RPCCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vuln::fuzz::RPCArgument > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  friend struct ::TableStruct_vuln_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCArgument

// required bytes key = 1;
inline bool RPCArgument::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCArgument::has_key() const {
  return _internal_has_key();
}
inline void RPCArgument::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCArgument::key() const {
  // @@protoc_insertion_point(field_get:vuln.fuzz.RPCArgument.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCArgument::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vuln.fuzz.RPCArgument.key)
}
inline std::string* RPCArgument::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:vuln.fuzz.RPCArgument.key)
  return _s;
}
inline const std::string& RPCArgument::_internal_key() const {
  return key_.Get();
}
inline void RPCArgument::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCArgument::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCArgument::release_key() {
  // @@protoc_insertion_point(field_release:vuln.fuzz.RPCArgument.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCArgument::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vuln.fuzz.RPCArgument.key)
}

// bytes vstr = 2;
inline bool RPCArgument::_internal_has_vstr() const {
  return value_case() == kVstr;
}
inline bool RPCArgument::has_vstr() const {
  return _internal_has_vstr();
}
inline void RPCArgument::set_has_vstr() {
  _oneof_case_[0] = kVstr;
}
inline void RPCArgument::clear_vstr() {
  if (_internal_has_vstr()) {
    value_.vstr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& RPCArgument::vstr() const {
  // @@protoc_insertion_point(field_get:vuln.fuzz.RPCArgument.vstr)
  return _internal_vstr();
}
template <typename ArgT0, typename... ArgT>
inline void RPCArgument::set_vstr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_vstr()) {
    clear_value();
    set_has_vstr();
    value_.vstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.vstr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vuln.fuzz.RPCArgument.vstr)
}
inline std::string* RPCArgument::mutable_vstr() {
  std::string* _s = _internal_mutable_vstr();
  // @@protoc_insertion_point(field_mutable:vuln.fuzz.RPCArgument.vstr)
  return _s;
}
inline const std::string& RPCArgument::_internal_vstr() const {
  if (_internal_has_vstr()) {
    return value_.vstr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RPCArgument::_internal_set_vstr(const std::string& value) {
  if (!_internal_has_vstr()) {
    clear_value();
    set_has_vstr();
    value_.vstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.vstr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCArgument::_internal_mutable_vstr() {
  if (!_internal_has_vstr()) {
    clear_value();
    set_has_vstr();
    value_.vstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.vstr_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCArgument::release_vstr() {
  // @@protoc_insertion_point(field_release:vuln.fuzz.RPCArgument.vstr)
  if (_internal_has_vstr()) {
    clear_has_value();
    return value_.vstr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void RPCArgument::set_allocated_vstr(std::string* vstr) {
  if (has_value()) {
    clear_value();
  }
  if (vstr != nullptr) {
    set_has_vstr();
    value_.vstr_.UnsafeSetDefault(vstr);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(vstr);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:vuln.fuzz.RPCArgument.vstr)
}

// uint64 vint = 3;
inline bool RPCArgument::_internal_has_vint() const {
  return value_case() == kVint;
}
inline bool RPCArgument::has_vint() const {
  return _internal_has_vint();
}
inline void RPCArgument::set_has_vint() {
  _oneof_case_[0] = kVint;
}
inline void RPCArgument::clear_vint() {
  if (_internal_has_vint()) {
    value_.vint_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t RPCArgument::_internal_vint() const {
  if (_internal_has_vint()) {
    return value_.vint_;
  }
  return uint64_t{0u};
}
inline void RPCArgument::_internal_set_vint(uint64_t value) {
  if (!_internal_has_vint()) {
    clear_value();
    set_has_vint();
  }
  value_.vint_ = value;
}
inline uint64_t RPCArgument::vint() const {
  // @@protoc_insertion_point(field_get:vuln.fuzz.RPCArgument.vint)
  return _internal_vint();
}
inline void RPCArgument::set_vint(uint64_t value) {
  _internal_set_vint(value);
  // @@protoc_insertion_point(field_set:vuln.fuzz.RPCArgument.vint)
}

// bool vbool = 4;
inline bool RPCArgument::_internal_has_vbool() const {
  return value_case() == kVbool;
}
inline bool RPCArgument::has_vbool() const {
  return _internal_has_vbool();
}
inline void RPCArgument::set_has_vbool() {
  _oneof_case_[0] = kVbool;
}
inline void RPCArgument::clear_vbool() {
  if (_internal_has_vbool()) {
    value_.vbool_ = false;
    clear_has_value();
  }
}
inline bool RPCArgument::_internal_vbool() const {
  if (_internal_has_vbool()) {
    return value_.vbool_;
  }
  return false;
}
inline void RPCArgument::_internal_set_vbool(bool value) {
  if (!_internal_has_vbool()) {
    clear_value();
    set_has_vbool();
  }
  value_.vbool_ = value;
}
inline bool RPCArgument::vbool() const {
  // @@protoc_insertion_point(field_get:vuln.fuzz.RPCArgument.vbool)
  return _internal_vbool();
}
inline void RPCArgument::set_vbool(bool value) {
  _internal_set_vbool(value);
  // @@protoc_insertion_point(field_set:vuln.fuzz.RPCArgument.vbool)
}

// double vfloat = 5;
inline bool RPCArgument::_internal_has_vfloat() const {
  return value_case() == kVfloat;
}
inline bool RPCArgument::has_vfloat() const {
  return _internal_has_vfloat();
}
inline void RPCArgument::set_has_vfloat() {
  _oneof_case_[0] = kVfloat;
}
inline void RPCArgument::clear_vfloat() {
  if (_internal_has_vfloat()) {
    value_.vfloat_ = 0;
    clear_has_value();
  }
}
inline double RPCArgument::_internal_vfloat() const {
  if (_internal_has_vfloat()) {
    return value_.vfloat_;
  }
  return 0;
}
inline void RPCArgument::_internal_set_vfloat(double value) {
  if (!_internal_has_vfloat()) {
    clear_value();
    set_has_vfloat();
  }
  value_.vfloat_ = value;
}
inline double RPCArgument::vfloat() const {
  // @@protoc_insertion_point(field_get:vuln.fuzz.RPCArgument.vfloat)
  return _internal_vfloat();
}
inline void RPCArgument::set_vfloat(double value) {
  _internal_set_vfloat(value);
  // @@protoc_insertion_point(field_set:vuln.fuzz.RPCArgument.vfloat)
}

inline bool RPCArgument::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void RPCArgument::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline RPCArgument::ValueCase RPCArgument::value_case() const {
  return RPCArgument::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RPCCall

// required bytes op = 1;
inline bool RPCCall::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RPCCall::has_op() const {
  return _internal_has_op();
}
inline void RPCCall::clear_op() {
  op_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RPCCall::op() const {
  // @@protoc_insertion_point(field_get:vuln.fuzz.RPCCall.op)
  return _internal_op();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCCall::set_op(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 op_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vuln.fuzz.RPCCall.op)
}
inline std::string* RPCCall::mutable_op() {
  std::string* _s = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:vuln.fuzz.RPCCall.op)
  return _s;
}
inline const std::string& RPCCall::_internal_op() const {
  return op_.Get();
}
inline void RPCCall::_internal_set_op(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  op_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCCall::_internal_mutable_op() {
  _has_bits_[0] |= 0x00000001u;
  return op_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCCall::release_op() {
  // @@protoc_insertion_point(field_release:vuln.fuzz.RPCCall.op)
  if (!_internal_has_op()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = op_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (op_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RPCCall::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (op_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vuln.fuzz.RPCCall.op)
}

// repeated .vuln.fuzz.RPCArgument args = 2;
inline int RPCCall::_internal_args_size() const {
  return args_.size();
}
inline int RPCCall::args_size() const {
  return _internal_args_size();
}
inline void RPCCall::clear_args() {
  args_.Clear();
}
inline ::vuln::fuzz::RPCArgument* RPCCall::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:vuln.fuzz.RPCCall.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vuln::fuzz::RPCArgument >*
RPCCall::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:vuln.fuzz.RPCCall.args)
  return &args_;
}
inline const ::vuln::fuzz::RPCArgument& RPCCall::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::vuln::fuzz::RPCArgument& RPCCall::args(int index) const {
  // @@protoc_insertion_point(field_get:vuln.fuzz.RPCCall.args)
  return _internal_args(index);
}
inline ::vuln::fuzz::RPCArgument* RPCCall::_internal_add_args() {
  return args_.Add();
}
inline ::vuln::fuzz::RPCArgument* RPCCall::add_args() {
  ::vuln::fuzz::RPCArgument* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:vuln.fuzz.RPCCall.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vuln::fuzz::RPCArgument >&
RPCCall::args() const {
  // @@protoc_insertion_point(field_list:vuln.fuzz.RPCCall.args)
  return args_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fuzz
}  // namespace vuln

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vuln_2eproto
