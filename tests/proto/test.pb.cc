// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lpmpp {
namespace test {
constexpr NestedTestMsg::NestedTestMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , str2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blob1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blob2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct NestedTestMsgDefaultTypeInternal {
  constexpr NestedTestMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NestedTestMsgDefaultTypeInternal() {}
  union {
    NestedTestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NestedTestMsgDefaultTypeInternal _NestedTestMsg_default_instance_;
constexpr TestMsg::TestMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nested_(){}
struct TestMsgDefaultTypeInternal {
  constexpr TestMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestMsgDefaultTypeInternal() {}
  union {
    TestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestMsgDefaultTypeInternal _TestMsg_default_instance_;
}  // namespace test
}  // namespace lpmpp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_test_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const uint32_t TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, str1_),
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, str2_),
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, blob1_),
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, blob2_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::NestedTestMsg, v_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::TestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lpmpp::test::TestMsg, nested_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::lpmpp::test::NestedTestMsg)},
  { 23, -1, -1, sizeof(::lpmpp::test::TestMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lpmpp::test::_NestedTestMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lpmpp::test::_TestMsg_default_instance_),
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\022\nlpmpp.test\"\260\001\n\rNestedTestM"
  "sg\022\014\n\004str1\030\001 \002(\t\022\014\n\004str2\030\002 \001(\t\022\r\n\005blob1\030"
  "\003 \002(\014\022\r\n\005blob2\030\004 \001(\014\022\020\n\006number\030\005 \001(\001H\000\022\021"
  "\n\007integer\030\006 \001(\004H\000\022\021\n\007boolean\030\007 \001(\010H\000\022(\n\003"
  "msg\030\010 \001(\0132\031.lpmpp.test.NestedTestMsgH\000B\003"
  "\n\001v\"4\n\007TestMsg\022)\n\006nested\030\001 \003(\0132\031.lpmpp.t"
  "est.NestedTestMsg"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_test_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto = {
  false, false, 257, descriptor_table_protodef_test_2eproto, "test.proto", 
  &descriptor_table_test_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_test_2eproto::offsets,
  file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto, file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_test_2eproto_getter() {
  return &descriptor_table_test_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
namespace lpmpp {
namespace test {

// ===================================================================

class NestedTestMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<NestedTestMsg>()._has_bits_);
  static void set_has_str1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_str2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_blob1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blob2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::lpmpp::test::NestedTestMsg& msg(const NestedTestMsg* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::lpmpp::test::NestedTestMsg&
NestedTestMsg::_Internal::msg(const NestedTestMsg* msg) {
  return *msg->v_.msg_;
}
void NestedTestMsg::set_allocated_msg(::lpmpp::test::NestedTestMsg* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_v();
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::lpmpp::test::NestedTestMsg>::GetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
    v_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:lpmpp.test.NestedTestMsg.msg)
}
NestedTestMsg::NestedTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lpmpp.test.NestedTestMsg)
}
NestedTestMsg::NestedTestMsg(const NestedTestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str1()) {
    str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str1(), 
      GetArenaForAllocation());
  }
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str2()) {
    str2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str2(), 
      GetArenaForAllocation());
  }
  blob1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blob1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_blob1()) {
    blob1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob1(), 
      GetArenaForAllocation());
  }
  blob2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blob2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_blob2()) {
    blob2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob2(), 
      GetArenaForAllocation());
  }
  clear_has_v();
  switch (from.v_case()) {
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case kInteger: {
      _internal_set_integer(from._internal_integer());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kMsg: {
      _internal_mutable_msg()->::lpmpp::test::NestedTestMsg::MergeFrom(from._internal_msg());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lpmpp.test.NestedTestMsg)
}

inline void NestedTestMsg::SharedCtor() {
str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
blob1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blob1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
blob2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blob2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_v();
}

NestedTestMsg::~NestedTestMsg() {
  // @@protoc_insertion_point(destructor:lpmpp.test.NestedTestMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NestedTestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blob1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blob2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_v()) {
    clear_v();
  }
}

void NestedTestMsg::ArenaDtor(void* object) {
  NestedTestMsg* _this = reinterpret_cast< NestedTestMsg* >(object);
  (void)_this;
}
void NestedTestMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NestedTestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedTestMsg::clear_v() {
// @@protoc_insertion_point(one_of_clear_start:lpmpp.test.NestedTestMsg)
  switch (v_case()) {
    case kNumber: {
      // No need to clear
      break;
    }
    case kInteger: {
      // No need to clear
      break;
    }
    case kBoolean: {
      // No need to clear
      break;
    }
    case kMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete v_.msg_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V_NOT_SET;
}


void NestedTestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:lpmpp.test.NestedTestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      str1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      str2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      blob1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      blob2_.ClearNonDefaultToEmpty();
    }
  }
  clear_v();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedTestMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string str1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_str1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lpmpp.test.NestedTestMsg.str1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string str2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lpmpp.test.NestedTestMsg.str2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes blob1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_blob1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes blob2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_blob2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _internal_set_number(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 integer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_integer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool boolean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .lpmpp.test.NestedTestMsg msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NestedTestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lpmpp.test.NestedTestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string str1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str1().data(), static_cast<int>(this->_internal_str1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lpmpp.test.NestedTestMsg.str1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str1(), target);
  }

  // optional string str2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str2().data(), static_cast<int>(this->_internal_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "lpmpp.test.NestedTestMsg.str2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str2(), target);
  }

  // required bytes blob1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blob1(), target);
  }

  // optional bytes blob2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_blob2(), target);
  }

  switch (v_case()) {
    case kNumber: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_number(), target);
      break;
    }
    case kInteger: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_integer(), target);
      break;
    }
    case kBoolean: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_boolean(), target);
      break;
    }
    case kMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::msg(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lpmpp.test.NestedTestMsg)
  return target;
}

size_t NestedTestMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lpmpp.test.NestedTestMsg)
  size_t total_size = 0;

  if (_internal_has_str1()) {
    // required string str1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str1());
  }

  if (_internal_has_blob1()) {
    // required bytes blob1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob1());
  }

  return total_size;
}
size_t NestedTestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lpmpp.test.NestedTestMsg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string str1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str1());

    // required bytes blob1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob1());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str2 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str2());
  }

  // optional bytes blob2 = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob2());
  }

  switch (v_case()) {
    // double number = 5;
    case kNumber: {
      total_size += 1 + 8;
      break;
    }
    // uint64 integer = 6;
    case kInteger: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_integer());
      break;
    }
    // bool boolean = 7;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    // .lpmpp.test.NestedTestMsg msg = 8;
    case kMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_.msg_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NestedTestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NestedTestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NestedTestMsg::GetClassData() const { return &_class_data_; }

void NestedTestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NestedTestMsg *>(to)->MergeFrom(
      static_cast<const NestedTestMsg &>(from));
}


void NestedTestMsg::MergeFrom(const NestedTestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lpmpp.test.NestedTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_str1(from._internal_str1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_str2(from._internal_str2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_blob1(from._internal_blob1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_blob2(from._internal_blob2());
    }
  }
  switch (from.v_case()) {
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case kInteger: {
      _internal_set_integer(from._internal_integer());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kMsg: {
      _internal_mutable_msg()->::lpmpp::test::NestedTestMsg::MergeFrom(from._internal_msg());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NestedTestMsg::CopyFrom(const NestedTestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lpmpp.test.NestedTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (v_case()) {
    case kNumber: {
      break;
    }
    case kInteger: {
      break;
    }
    case kBoolean: {
      break;
    }
    case kMsg: {
      if (_internal_has_msg()) {
        if (!v_.msg_->IsInitialized()) return false;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return true;
}

void NestedTestMsg::InternalSwap(NestedTestMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str1_, lhs_arena,
      &other->str1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str2_, lhs_arena,
      &other->str2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blob1_, lhs_arena,
      &other->blob1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blob2_, lhs_arena,
      &other->blob2_, rhs_arena
  );
  swap(v_, other->v_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedTestMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[0]);
}

// ===================================================================

class TestMsg::_Internal {
 public:
};

TestMsg::TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nested_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lpmpp.test.TestMsg)
}
TestMsg::TestMsg(const TestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nested_(from.nested_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lpmpp.test.TestMsg)
}

inline void TestMsg::SharedCtor() {
}

TestMsg::~TestMsg() {
  // @@protoc_insertion_point(destructor:lpmpp.test.TestMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMsg::ArenaDtor(void* object) {
  TestMsg* _this = reinterpret_cast< TestMsg* >(object);
  (void)_this;
}
void TestMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:lpmpp.test.TestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nested_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lpmpp.test.NestedTestMsg nested = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lpmpp.test.TestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lpmpp.test.NestedTestMsg nested = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nested_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nested(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lpmpp.test.TestMsg)
  return target;
}

size_t TestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lpmpp.test.TestMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lpmpp.test.NestedTestMsg nested = 1;
  total_size += 1UL * this->_internal_nested_size();
  for (const auto& msg : this->nested_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMsg::GetClassData() const { return &_class_data_; }

void TestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMsg *>(to)->MergeFrom(
      static_cast<const TestMsg &>(from));
}


void TestMsg::MergeFrom(const TestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lpmpp.test.TestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nested_.MergeFrom(from.nested_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMsg::CopyFrom(const TestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lpmpp.test.TestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMsg::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(nested_))
    return false;
  return true;
}

void TestMsg::InternalSwap(TestMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nested_.InternalSwap(&other->nested_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace test
}  // namespace lpmpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lpmpp::test::NestedTestMsg* Arena::CreateMaybeMessage< ::lpmpp::test::NestedTestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lpmpp::test::NestedTestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::lpmpp::test::TestMsg* Arena::CreateMaybeMessage< ::lpmpp::test::TestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lpmpp::test::TestMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
