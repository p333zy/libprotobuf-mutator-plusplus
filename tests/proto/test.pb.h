// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace lpmpp {
namespace test {
class NestedTestMsg;
struct NestedTestMsgDefaultTypeInternal;
extern NestedTestMsgDefaultTypeInternal _NestedTestMsg_default_instance_;
class TestMsg;
struct TestMsgDefaultTypeInternal;
extern TestMsgDefaultTypeInternal _TestMsg_default_instance_;
}  // namespace test
}  // namespace lpmpp
PROTOBUF_NAMESPACE_OPEN
template<> ::lpmpp::test::NestedTestMsg* Arena::CreateMaybeMessage<::lpmpp::test::NestedTestMsg>(Arena*);
template<> ::lpmpp::test::TestMsg* Arena::CreateMaybeMessage<::lpmpp::test::TestMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lpmpp {
namespace test {

// ===================================================================

class NestedTestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lpmpp.test.NestedTestMsg) */ {
 public:
  inline NestedTestMsg() : NestedTestMsg(nullptr) {}
  ~NestedTestMsg() override;
  explicit constexpr NestedTestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NestedTestMsg(const NestedTestMsg& from);
  NestedTestMsg(NestedTestMsg&& from) noexcept
    : NestedTestMsg() {
    *this = ::std::move(from);
  }

  inline NestedTestMsg& operator=(const NestedTestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedTestMsg& operator=(NestedTestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NestedTestMsg& default_instance() {
    return *internal_default_instance();
  }
  enum VCase {
    kNumber = 5,
    kInteger = 6,
    kBoolean = 7,
    kMsg = 8,
    V_NOT_SET = 0,
  };

  static inline const NestedTestMsg* internal_default_instance() {
    return reinterpret_cast<const NestedTestMsg*>(
               &_NestedTestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NestedTestMsg& a, NestedTestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedTestMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedTestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NestedTestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NestedTestMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NestedTestMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NestedTestMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedTestMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lpmpp.test.NestedTestMsg";
  }
  protected:
  explicit NestedTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStr1FieldNumber = 1,
    kStr2FieldNumber = 2,
    kBlob1FieldNumber = 3,
    kBlob2FieldNumber = 4,
    kNumberFieldNumber = 5,
    kIntegerFieldNumber = 6,
    kBooleanFieldNumber = 7,
    kMsgFieldNumber = 8,
  };
  // required string str1 = 1;
  bool has_str1() const;
  private:
  bool _internal_has_str1() const;
  public:
  void clear_str1();
  const std::string& str1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str1();
  PROTOBUF_NODISCARD std::string* release_str1();
  void set_allocated_str1(std::string* str1);
  private:
  const std::string& _internal_str1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str1(const std::string& value);
  std::string* _internal_mutable_str1();
  public:

  // optional string str2 = 2;
  bool has_str2() const;
  private:
  bool _internal_has_str2() const;
  public:
  void clear_str2();
  const std::string& str2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str2();
  PROTOBUF_NODISCARD std::string* release_str2();
  void set_allocated_str2(std::string* str2);
  private:
  const std::string& _internal_str2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str2(const std::string& value);
  std::string* _internal_mutable_str2();
  public:

  // required bytes blob1 = 3;
  bool has_blob1() const;
  private:
  bool _internal_has_blob1() const;
  public:
  void clear_blob1();
  const std::string& blob1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blob1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blob1();
  PROTOBUF_NODISCARD std::string* release_blob1();
  void set_allocated_blob1(std::string* blob1);
  private:
  const std::string& _internal_blob1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob1(const std::string& value);
  std::string* _internal_mutable_blob1();
  public:

  // optional bytes blob2 = 4;
  bool has_blob2() const;
  private:
  bool _internal_has_blob2() const;
  public:
  void clear_blob2();
  const std::string& blob2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blob2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blob2();
  PROTOBUF_NODISCARD std::string* release_blob2();
  void set_allocated_blob2(std::string* blob2);
  private:
  const std::string& _internal_blob2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob2(const std::string& value);
  std::string* _internal_mutable_blob2();
  public:

  // double number = 5;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  double number() const;
  void set_number(double value);
  private:
  double _internal_number() const;
  void _internal_set_number(double value);
  public:

  // uint64 integer = 6;
  bool has_integer() const;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  uint64_t integer() const;
  void set_integer(uint64_t value);
  private:
  uint64_t _internal_integer() const;
  void _internal_set_integer(uint64_t value);
  public:

  // bool boolean = 7;
  bool has_boolean() const;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  bool boolean() const;
  void set_boolean(bool value);
  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);
  public:

  // .lpmpp.test.NestedTestMsg msg = 8;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::lpmpp::test::NestedTestMsg& msg() const;
  PROTOBUF_NODISCARD ::lpmpp::test::NestedTestMsg* release_msg();
  ::lpmpp::test::NestedTestMsg* mutable_msg();
  void set_allocated_msg(::lpmpp::test::NestedTestMsg* msg);
  private:
  const ::lpmpp::test::NestedTestMsg& _internal_msg() const;
  ::lpmpp::test::NestedTestMsg* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::lpmpp::test::NestedTestMsg* msg);
  ::lpmpp::test::NestedTestMsg* unsafe_arena_release_msg();

  void clear_v();
  VCase v_case() const;
  // @@protoc_insertion_point(class_scope:lpmpp.test.NestedTestMsg)
 private:
  class _Internal;
  void set_has_number();
  void set_has_integer();
  void set_has_boolean();
  void set_has_msg();

  inline bool has_v() const;
  inline void clear_has_v();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob2_;
  union VUnion {
    constexpr VUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    double number_;
    uint64_t integer_;
    bool boolean_;
    ::lpmpp::test::NestedTestMsg* msg_;
  } v_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lpmpp.test.TestMsg) */ {
 public:
  inline TestMsg() : TestMsg(nullptr) {}
  ~TestMsg() override;
  explicit constexpr TestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMsg(const TestMsg& from);
  TestMsg(TestMsg&& from) noexcept
    : TestMsg() {
    *this = ::std::move(from);
  }

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg& operator=(TestMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMsg* internal_default_instance() {
    return reinterpret_cast<const TestMsg*>(
               &_TestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMsg& a, TestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lpmpp.test.TestMsg";
  }
  protected:
  explicit TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNestedFieldNumber = 1,
  };
  // repeated .lpmpp.test.NestedTestMsg nested = 1;
  int nested_size() const;
  private:
  int _internal_nested_size() const;
  public:
  void clear_nested();
  ::lpmpp::test::NestedTestMsg* mutable_nested(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lpmpp::test::NestedTestMsg >*
      mutable_nested();
  private:
  const ::lpmpp::test::NestedTestMsg& _internal_nested(int index) const;
  ::lpmpp::test::NestedTestMsg* _internal_add_nested();
  public:
  const ::lpmpp::test::NestedTestMsg& nested(int index) const;
  ::lpmpp::test::NestedTestMsg* add_nested();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lpmpp::test::NestedTestMsg >&
      nested() const;

  // @@protoc_insertion_point(class_scope:lpmpp.test.TestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lpmpp::test::NestedTestMsg > nested_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NestedTestMsg

// required string str1 = 1;
inline bool NestedTestMsg::_internal_has_str1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NestedTestMsg::has_str1() const {
  return _internal_has_str1();
}
inline void NestedTestMsg::clear_str1() {
  str1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NestedTestMsg::str1() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.str1)
  return _internal_str1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NestedTestMsg::set_str1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lpmpp.test.NestedTestMsg.str1)
}
inline std::string* NestedTestMsg::mutable_str1() {
  std::string* _s = _internal_mutable_str1();
  // @@protoc_insertion_point(field_mutable:lpmpp.test.NestedTestMsg.str1)
  return _s;
}
inline const std::string& NestedTestMsg::_internal_str1() const {
  return str1_.Get();
}
inline void NestedTestMsg::_internal_set_str1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::_internal_mutable_str1() {
  _has_bits_[0] |= 0x00000001u;
  return str1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::release_str1() {
  // @@protoc_insertion_point(field_release:lpmpp.test.NestedTestMsg.str1)
  if (!_internal_has_str1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = str1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NestedTestMsg::set_allocated_str1(std::string* str1) {
  if (str1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lpmpp.test.NestedTestMsg.str1)
}

// optional string str2 = 2;
inline bool NestedTestMsg::_internal_has_str2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NestedTestMsg::has_str2() const {
  return _internal_has_str2();
}
inline void NestedTestMsg::clear_str2() {
  str2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NestedTestMsg::str2() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.str2)
  return _internal_str2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NestedTestMsg::set_str2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 str2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lpmpp.test.NestedTestMsg.str2)
}
inline std::string* NestedTestMsg::mutable_str2() {
  std::string* _s = _internal_mutable_str2();
  // @@protoc_insertion_point(field_mutable:lpmpp.test.NestedTestMsg.str2)
  return _s;
}
inline const std::string& NestedTestMsg::_internal_str2() const {
  return str2_.Get();
}
inline void NestedTestMsg::_internal_set_str2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  str2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::_internal_mutable_str2() {
  _has_bits_[0] |= 0x00000002u;
  return str2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::release_str2() {
  // @@protoc_insertion_point(field_release:lpmpp.test.NestedTestMsg.str2)
  if (!_internal_has_str2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = str2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NestedTestMsg::set_allocated_str2(std::string* str2) {
  if (str2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  str2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lpmpp.test.NestedTestMsg.str2)
}

// required bytes blob1 = 3;
inline bool NestedTestMsg::_internal_has_blob1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NestedTestMsg::has_blob1() const {
  return _internal_has_blob1();
}
inline void NestedTestMsg::clear_blob1() {
  blob1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NestedTestMsg::blob1() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.blob1)
  return _internal_blob1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NestedTestMsg::set_blob1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 blob1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lpmpp.test.NestedTestMsg.blob1)
}
inline std::string* NestedTestMsg::mutable_blob1() {
  std::string* _s = _internal_mutable_blob1();
  // @@protoc_insertion_point(field_mutable:lpmpp.test.NestedTestMsg.blob1)
  return _s;
}
inline const std::string& NestedTestMsg::_internal_blob1() const {
  return blob1_.Get();
}
inline void NestedTestMsg::_internal_set_blob1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  blob1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::_internal_mutable_blob1() {
  _has_bits_[0] |= 0x00000004u;
  return blob1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::release_blob1() {
  // @@protoc_insertion_point(field_release:lpmpp.test.NestedTestMsg.blob1)
  if (!_internal_has_blob1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = blob1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blob1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    blob1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NestedTestMsg::set_allocated_blob1(std::string* blob1) {
  if (blob1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  blob1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blob1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    blob1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lpmpp.test.NestedTestMsg.blob1)
}

// optional bytes blob2 = 4;
inline bool NestedTestMsg::_internal_has_blob2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NestedTestMsg::has_blob2() const {
  return _internal_has_blob2();
}
inline void NestedTestMsg::clear_blob2() {
  blob2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NestedTestMsg::blob2() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.blob2)
  return _internal_blob2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NestedTestMsg::set_blob2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 blob2_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lpmpp.test.NestedTestMsg.blob2)
}
inline std::string* NestedTestMsg::mutable_blob2() {
  std::string* _s = _internal_mutable_blob2();
  // @@protoc_insertion_point(field_mutable:lpmpp.test.NestedTestMsg.blob2)
  return _s;
}
inline const std::string& NestedTestMsg::_internal_blob2() const {
  return blob2_.Get();
}
inline void NestedTestMsg::_internal_set_blob2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  blob2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::_internal_mutable_blob2() {
  _has_bits_[0] |= 0x00000008u;
  return blob2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NestedTestMsg::release_blob2() {
  // @@protoc_insertion_point(field_release:lpmpp.test.NestedTestMsg.blob2)
  if (!_internal_has_blob2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = blob2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blob2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    blob2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NestedTestMsg::set_allocated_blob2(std::string* blob2) {
  if (blob2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  blob2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blob2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    blob2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lpmpp.test.NestedTestMsg.blob2)
}

// double number = 5;
inline bool NestedTestMsg::_internal_has_number() const {
  return v_case() == kNumber;
}
inline bool NestedTestMsg::has_number() const {
  return _internal_has_number();
}
inline void NestedTestMsg::set_has_number() {
  _oneof_case_[0] = kNumber;
}
inline void NestedTestMsg::clear_number() {
  if (_internal_has_number()) {
    v_.number_ = 0;
    clear_has_v();
  }
}
inline double NestedTestMsg::_internal_number() const {
  if (_internal_has_number()) {
    return v_.number_;
  }
  return 0;
}
inline void NestedTestMsg::_internal_set_number(double value) {
  if (!_internal_has_number()) {
    clear_v();
    set_has_number();
  }
  v_.number_ = value;
}
inline double NestedTestMsg::number() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.number)
  return _internal_number();
}
inline void NestedTestMsg::set_number(double value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:lpmpp.test.NestedTestMsg.number)
}

// uint64 integer = 6;
inline bool NestedTestMsg::_internal_has_integer() const {
  return v_case() == kInteger;
}
inline bool NestedTestMsg::has_integer() const {
  return _internal_has_integer();
}
inline void NestedTestMsg::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void NestedTestMsg::clear_integer() {
  if (_internal_has_integer()) {
    v_.integer_ = uint64_t{0u};
    clear_has_v();
  }
}
inline uint64_t NestedTestMsg::_internal_integer() const {
  if (_internal_has_integer()) {
    return v_.integer_;
  }
  return uint64_t{0u};
}
inline void NestedTestMsg::_internal_set_integer(uint64_t value) {
  if (!_internal_has_integer()) {
    clear_v();
    set_has_integer();
  }
  v_.integer_ = value;
}
inline uint64_t NestedTestMsg::integer() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.integer)
  return _internal_integer();
}
inline void NestedTestMsg::set_integer(uint64_t value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:lpmpp.test.NestedTestMsg.integer)
}

// bool boolean = 7;
inline bool NestedTestMsg::_internal_has_boolean() const {
  return v_case() == kBoolean;
}
inline bool NestedTestMsg::has_boolean() const {
  return _internal_has_boolean();
}
inline void NestedTestMsg::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void NestedTestMsg::clear_boolean() {
  if (_internal_has_boolean()) {
    v_.boolean_ = false;
    clear_has_v();
  }
}
inline bool NestedTestMsg::_internal_boolean() const {
  if (_internal_has_boolean()) {
    return v_.boolean_;
  }
  return false;
}
inline void NestedTestMsg::_internal_set_boolean(bool value) {
  if (!_internal_has_boolean()) {
    clear_v();
    set_has_boolean();
  }
  v_.boolean_ = value;
}
inline bool NestedTestMsg::boolean() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.boolean)
  return _internal_boolean();
}
inline void NestedTestMsg::set_boolean(bool value) {
  _internal_set_boolean(value);
  // @@protoc_insertion_point(field_set:lpmpp.test.NestedTestMsg.boolean)
}

// .lpmpp.test.NestedTestMsg msg = 8;
inline bool NestedTestMsg::_internal_has_msg() const {
  return v_case() == kMsg;
}
inline bool NestedTestMsg::has_msg() const {
  return _internal_has_msg();
}
inline void NestedTestMsg::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
inline void NestedTestMsg::clear_msg() {
  if (_internal_has_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete v_.msg_;
    }
    clear_has_v();
  }
}
inline ::lpmpp::test::NestedTestMsg* NestedTestMsg::release_msg() {
  // @@protoc_insertion_point(field_release:lpmpp.test.NestedTestMsg.msg)
  if (_internal_has_msg()) {
    clear_has_v();
      ::lpmpp::test::NestedTestMsg* temp = v_.msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    v_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lpmpp::test::NestedTestMsg& NestedTestMsg::_internal_msg() const {
  return _internal_has_msg()
      ? *v_.msg_
      : reinterpret_cast< ::lpmpp::test::NestedTestMsg&>(::lpmpp::test::_NestedTestMsg_default_instance_);
}
inline const ::lpmpp::test::NestedTestMsg& NestedTestMsg::msg() const {
  // @@protoc_insertion_point(field_get:lpmpp.test.NestedTestMsg.msg)
  return _internal_msg();
}
inline ::lpmpp::test::NestedTestMsg* NestedTestMsg::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:lpmpp.test.NestedTestMsg.msg)
  if (_internal_has_msg()) {
    clear_has_v();
    ::lpmpp::test::NestedTestMsg* temp = v_.msg_;
    v_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NestedTestMsg::unsafe_arena_set_allocated_msg(::lpmpp::test::NestedTestMsg* msg) {
  clear_v();
  if (msg) {
    set_has_msg();
    v_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lpmpp.test.NestedTestMsg.msg)
}
inline ::lpmpp::test::NestedTestMsg* NestedTestMsg::_internal_mutable_msg() {
  if (!_internal_has_msg()) {
    clear_v();
    set_has_msg();
    v_.msg_ = CreateMaybeMessage< ::lpmpp::test::NestedTestMsg >(GetArenaForAllocation());
  }
  return v_.msg_;
}
inline ::lpmpp::test::NestedTestMsg* NestedTestMsg::mutable_msg() {
  ::lpmpp::test::NestedTestMsg* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:lpmpp.test.NestedTestMsg.msg)
  return _msg;
}

inline bool NestedTestMsg::has_v() const {
  return v_case() != V_NOT_SET;
}
inline void NestedTestMsg::clear_has_v() {
  _oneof_case_[0] = V_NOT_SET;
}
inline NestedTestMsg::VCase NestedTestMsg::v_case() const {
  return NestedTestMsg::VCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestMsg

// repeated .lpmpp.test.NestedTestMsg nested = 1;
inline int TestMsg::_internal_nested_size() const {
  return nested_.size();
}
inline int TestMsg::nested_size() const {
  return _internal_nested_size();
}
inline void TestMsg::clear_nested() {
  nested_.Clear();
}
inline ::lpmpp::test::NestedTestMsg* TestMsg::mutable_nested(int index) {
  // @@protoc_insertion_point(field_mutable:lpmpp.test.TestMsg.nested)
  return nested_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lpmpp::test::NestedTestMsg >*
TestMsg::mutable_nested() {
  // @@protoc_insertion_point(field_mutable_list:lpmpp.test.TestMsg.nested)
  return &nested_;
}
inline const ::lpmpp::test::NestedTestMsg& TestMsg::_internal_nested(int index) const {
  return nested_.Get(index);
}
inline const ::lpmpp::test::NestedTestMsg& TestMsg::nested(int index) const {
  // @@protoc_insertion_point(field_get:lpmpp.test.TestMsg.nested)
  return _internal_nested(index);
}
inline ::lpmpp::test::NestedTestMsg* TestMsg::_internal_add_nested() {
  return nested_.Add();
}
inline ::lpmpp::test::NestedTestMsg* TestMsg::add_nested() {
  ::lpmpp::test::NestedTestMsg* _add = _internal_add_nested();
  // @@protoc_insertion_point(field_add:lpmpp.test.TestMsg.nested)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lpmpp::test::NestedTestMsg >&
TestMsg::nested() const {
  // @@protoc_insertion_point(field_list:lpmpp.test.TestMsg.nested)
  return nested_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace lpmpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
